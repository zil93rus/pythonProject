# 1. Создать список и заполнить его элементами различных типов данных. Реализовать скрипт проверки типа данных каждого
# элемента. Использовать функцию type() для проверки типа. Элементы списка можно не запрашивать у пользователя,
# а указать явно, в программе.

# my_list = [1, 1.0, "abc", False, [1, 2], {"abc": 1}, (1,)]
# count = 0
# while count < len(my_list):
#     print(f"Элемент - {my_list[count]} является - {type(my_list[count])}")
#     count += 1
#
# for i in my_list:
#     print(f"Элемент - {i} является - {type(i)}")


# 2. Для списка реализовать обмен значений соседних элементов, т.е. Значениями обмениваются элементы
# с индексами 0 и 1, 2 и 3 и т.д. При нечетном количестве элементов последний сохранить на своем месте.
# Для заполнения списка элементов необходимо использовать функцию input().


# 3. Пользователь вводит месяц в виде целого числа от 1 до 12. Сообщить к какому времени года относится
# месяц (зима, весна, лето, осень). Напишите решения через list и через dict.

# user_input = int(input("Введите число месяца: "))
# winter = [12, 1, 2]
# spring = [3, 4, 5]
# summer = [6, 7, 8]
# autumn = [9, 10, 11]
#
# if user_input in winter:
#     print("Это зима")
# elif user_input in spring:
#     print("Это весна")
# elif user_input in summer:
#     print("Это лето")
# else:
#     print("Это осень")
#
# weather = {"Зима": [12, 1, 2],
#            "Весна": [3, 4, 5],
#            "Лето": [6, 7, 8],
#            "Осень": [9, 10, 11]
#            }
# for i in weather:
#     if user_input in weather[i]:
#         print(i)

# 4. Пользователь вводит строку из нескольких слов, разделённых пробелами. Вывести каждое слово с новой строки.
# Строки необходимо пронумеровать. Если в слово длинное, выводить только первые 10 букв в слове.

# my_str = "123456789101112 ADc dfkdlfks gfglk elk fwlerk cvnfmvnr ewrkg wgfkndg"
# new_ls = my_str.split()
# count = 1
# for i in new_ls:
#     print(f"{count}. {i[:10]}")
#     count += 1

# 5. Реализовать структуру «Рейтинг», представляющую собой не возрастающий набор натуральных чисел.
# У пользователя необходимо запрашивать новый элемент рейтинга. Если в рейтинге существуют элементы
# с одинаковыми значениями, то новый элемент с тем же значением должен разместиться после них.
# Подсказка. Например, набор натуральных чисел: 7, 5, 3, 3, 2.
# Пользователь ввел число 3. Результат: 7, 5, 3, 3, 3, 2.
# Пользователь ввел число 8. Результат: 8, 7, 5, 3, 3, 2.
# Пользователь ввел число 1. Результат: 7, 5, 3, 3, 2, 1.
# Набор натуральных чисел можно задать непосредственно в коде, например, my_list = [7, 5, 3, 3, 2].

my_list = [7, 5, 3, 3, 2]
user_input = int(input("Введите число: "))
for i in range(0, len(my_list)):
    if user_input in my_list:
        pos = my_list.index(user_input)
        count = my_list.count(user_input)
        my_list.insert(pos+count, user_input)
    elif user_input > my_list[i]:
        my_list.insert(0, user_input)
        break
    elif user_input < my_list[i]:
        pos = my_list.index(my_list[i])
        my_list.insert(pos + 1, user_input)
        break

print(my_list)



# 6. * Реализовать структуру данных «Товары». Она должна представлять собой список кортежей.
# Каждый кортеж хранит информацию об отдельном товаре. В кортеже должно быть два элемента —
# номер товара и словарь с параметрами (характеристиками товара: название, цена, количество, единица измерения).
# Структуру нужно сформировать программно, т.е. запрашивать все данные у пользователя.
# Пример готовой структуры:
# [
#
# (1, {“название”: “компьютер”, “цена”: 20000, “количество”: 5, “eд”: “шт.”}),
# (2, {“название”: “принтер”, “цена”: 6000, “количество”: 2, “eд”: “шт.”}),
# (3, {“название”: “сканер”, “цена”: 2000, “количество”: 7, “eд”: “шт.”})
#
# ]
# Необходимо собрать аналитику о товарах. Реализовать словарь, в котором каждый ключ — характеристика товара,
# например название, а значение — список значений-характеристик, например список названий товаров.
# Пример:
# {
#
# “название”: [“компьютер”, “принтер”, “сканер”],
# “цена”: [20000, 6000, 2000],
# “количество”: [5, 2, 7],
# “ед”: [“шт.”]
#
# }
